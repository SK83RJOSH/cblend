name: "build"

on:
  pull_request:
  release:
    types: [published]
  push:
    tags:
    branches:
      - main
      - develop

env:
  CONAN_SYSREQUIRES_MODE: enabled
  CONAN_USER_HOME: "${{ github.workspace }}/conan-cache"
  CONAN_USER_HOME_SHORT: "${{ github.workspace }}/conan-cache/short"
  CLANG_TIDY_VERSION: "15.0.2"

jobs:
  Test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false

      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        compiler:
          - llvm-15.0.2
          - gcc-11
        generator:
          - "Ninja Multi-Config"
        build_type:
          - Release
          - Debug
        enable_validation:
          - ON
          - OFF

        exclude:
          # mingw is determined by this author to be too buggy to support
          - os: windows-latest
            compiler: gcc-11

        include:
          # Add appropriate variables for gcov
          - compiler: gcc-11
            gcov_executable: gcov
          - compiler: llvm-15.0.2
            gcov_executable: "llvm-cov gcov"

          # Set up preferred package generators, for given build configurations
          - build_type: Release
            enable_validation: OFF
            package_generator: TBZ2

          # This exists solely to make sure a non-multiconfig build works
          - os: ubuntu-latest
            compiler: gcc-11
            generator: "Unix Makefiles"
            build_type: Debug
            gcov_executable: gcov
            enable_validation: On

          # Windows msvc builds
          - os: windows-latest
            compiler: msvc
            generator: "Visual Studio 17 2022"
            build_type: Debug
            enable_validation: On

          - os: windows-latest
            compiler: msvc
            generator: "Visual Studio 17 2022"
            build_type: Release
            enable_validation: On

          - os: windows-latest
            compiler: msvc
            generator: "Visual Studio 17 2022"
            build_type: Debug
            enable_validation: Off

          - os: windows-latest
            compiler: msvc
            generator: "Visual Studio 17 2022"
            build_type: Release
            enable_validation: Off
            package_generator: ZIP

    steps:
      - name: Check for llvm version mismatches
        if: ${{ contains(matrix.compiler, 'llvm') && !contains(matrix.compiler, env.CLANG_TIDY_VERSION) }}
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('There is a mismatch between configured llvm compiler and clang-tidy version chosen')

      - uses: actions/checkout@v3
        with:
          lfs: true
          submodules: recursive

      - name: Setup Cache
        uses: ./.github/actions/setup_cache
        with:
          compiler: ${{ matrix.compiler }}
          build_type: ${{ matrix.build_type }}
          enable_validation: ${{ matrix.enable_validation }}
          generator: ${{ matrix.generator }}

      - name: Setup Cpp
        id: setup_cpp
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.compiler }}
          vcvarsall: ${{ contains(matrix.os, 'windows' )}}
          cmake: true
          ninja: true
          conan: false
          vcpkg: false
          ccache: true
          clangtidy: ${{ env.CLANG_TIDY_VERSION }}
          cppcheck: true
          gcovr: true
          opencppcoverage: true

      - name: Cleanup Conan system packages (they are not properly cached)
        if: steps.setup_cpp.with.conan == true
        run: |
          conan remove -f '*/system'

      - name: Configure CMake
        run: |
          cmake -S . -B ./build -G "${{matrix.generator}}" CPACK_PACKAGING_INSTALL_PREFIX=./install -DCMAKE_INSTALL_PREFIX:STRING=./install -DCMAKE_BUILD_TYPE:STRING=${{matrix.build_type}} -DOPT_ENABLE_VALIDATION:BOOL=${{matrix.enable_validation}} -DOPT_ENABLE_COVERAGE:BOOL=${{ matrix.build_type == 'Debug' }}

      - name: Build
        # Clear out LLVM environment to avoid issues with GCC.
        env:
          LLVM_PATH: ""
          LD_LIBRARY_PATH: ""
          DYLD_LIBRARY_PATH: ""
          LDFLAGS: ""
          CPPFLAGS: ""
          LIBRARY_PATH: ""
          CPATH: ""
        # Execute the build. You can specify a specific target with "--target <NAME>"
        run: |
          cmake --build ./build --config ${{matrix.build_type}}

      - name: Unix - Test and coverage
        if: runner.os != 'Windows'
        working-directory: ./build
        # Execute tests defined by the CMake configuration.
        run: |
          ctest -C ${{matrix.build_type}}
          gcovr -j ${{env.nproc}} --delete --root ../ --print-summary --xml-pretty --xml coverage.xml . --gcov-executable '${{ matrix.gcov_executable }}'

      - name: Windows - Test and coverage
        if: runner.os == 'Windows'
        working-directory: ./build
        run: |
          OpenCppCoverage.exe --export_type cobertura:coverage.xml --cover_children -- ctest -C ${{matrix.build_type}}

      - name: CPack
        if: matrix.package_generator != ''
        working-directory: ./build
        run: |
          cpack -C ${{matrix.build_type}} -G ${{matrix.package_generator}}

      - name: Publish Tagged Release
        uses: softprops/action-gh-release@v1
        if: ${{ startsWith(github.ref, 'refs/tags/') && matrix.package_generator != '' }}
        with:
          files: |
            build/*-*${{ matrix.build_type }}*-*.*

      - name: Publish to codecov
        uses: codecov/codecov-action@v2
        with:
          flags: ${{ runner.os }}
          name: ${{ runner.os }}-coverage
          files: ./build/coverage.xml
